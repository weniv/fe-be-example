# GitHub Actions 워크플로우 - AWS EC2 배포
# 이 파일은 코드가 GitHub에 푸시될 때 자동으로 EC2 서버에 배포하는 역할을 합니다
name: Deploy to AWS EC2

# 워크플로우가 실행될 조건 설정
# master 브랜치에 코드가 푸시될 때만 배포를 실행합니다
on:
  push:
    branches: [ master ]

# 실행할 작업들을 정의합니다
jobs:
  # 배포 작업 정의
  deploy:
    # Ubuntu 가상 머신에서 실행
    runs-on: ubuntu-latest
    
    steps:
    # EC2 서버에 SSH로 접속하여 배포 작업 수행
    - name: Deploy to EC2
      # appleboy/ssh-action: SSH 접속을 쉽게 해주는 GitHub Action (최신 버전)
      uses: appleboy/ssh-action@v1.2.0
      with:
        # GitHub Secrets에 저장된 값들을 사용 (보안을 위해)
        host: ${{ secrets.EC2_HOST }}           # EC2 서버 IP 주소
        username: ${{ secrets.EC2_USER }}       # EC2 로그인 사용자명 (보통 ubuntu)
        key: ${{ secrets.EC2_SSH_KEY }}         # EC2 접속용 SSH 키 (.pem 파일 내용)
        
        # EC2 서버에서 실행할 명령어들
        script: |
          # 프로젝트 디렉토리로 이동
          cd ~/fastapi-app
          
          # 최신 코드를 GitHub에서 가져오기
          git pull origin master
          
          # Python 가상환경 활성화
          # 가상환경은 프로젝트별로 독립된 Python 환경을 제공합니다
          source venv/bin/activate
          
          # 새로 추가된 패키지들을 설치
          pip install -r requirements.txt
          
          # 환경변수 파일(.env) 생성 (GitHub Secrets의 값들 사용)
          # 기존 .env 파일이 있다면 삭제하고 새로 생성
          rm -f .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          
          # FastAPI 서비스 재시작하여 변경사항 반영
          sudo systemctl restart fastapi